// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Yarp.Gateway.EntityFrameworkCore;

#nullable disable

namespace Yarp.Gateway.Migrations
{
    [DbContext(typeof(YarpDbContext))]
    [Migration("20220901084804_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpActiveHealthCheckOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Enabled")
                        .HasColumnType("bit");

                    b.Property<Guid?>("HealthCheckOptionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Interval")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Policy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Timeout")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HealthCheckOptionId")
                        .IsUnique();

                    b.ToTable("YarpActiveHealthCheckOptions");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpCluster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClusterId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoadBalancingPolicy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("YarpClusters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("347c00cf-6e72-4f9f-8f8e-2d695a3a2cd6"),
                            ClusterId = "dapr-sidercar"
                        });
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpDestination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ClusterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Health")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId");

                    b.ToTable("YarpDestinations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0a0c55a-c3bf-457b-b6cb-9b609fee0fb5"),
                            Address = "http://127.0.0.1:3500",
                            ClusterId = new Guid("347c00cf-6e72-4f9f-8f8e-2d695a3a2cd6"),
                            Name = "dapr-sidercar/destination1"
                        });
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpForwarderRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActivityTimeout")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("AllowResponseBuffering")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ClusterId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VersionPolicy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId")
                        .IsUnique();

                    b.ToTable("YarpRequestProxyOptions");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpHealthCheckOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvailableDestinationsPolicy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ClusterId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId")
                        .IsUnique();

                    b.ToTable("YarpHealthCheckOptions");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpHttpClientOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClusterId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("DangerousAcceptAnyServerCertificate")
                        .HasColumnType("bit");

                    b.Property<bool?>("EnableMultipleHttp2Connections")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxConnectionsPerServer")
                        .HasColumnType("int");

                    b.Property<string>("RequestHeaderEncoding")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SslProtocols")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId")
                        .IsUnique();

                    b.ToTable("YarpProxyHttpClientOptions");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpMatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Hosts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Methods")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RouteId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RouteId")
                        .IsUnique();

                    b.ToTable("YarpMatches");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2db8dfd-8a12-4c41-bb86-14f8536a07d1"),
                            Path = "/api/first/{**catch-all}",
                            RouteId = new Guid("cbeaf261-a0e4-42a0-b19b-8cd66da30eaf")
                        },
                        new
                        {
                            Id = new Guid("a0b45724-958c-42b4-b4fa-538f0645eb6d"),
                            Path = "/api/second/{**catch-all}",
                            RouteId = new Guid("a4ad8801-0d3c-4737-9043-5b90fb1dac23")
                        });
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpMetadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClusterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DestinationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RouteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId");

                    b.HasIndex("DestinationId");

                    b.HasIndex("RouteId");

                    b.ToTable("YarpMetadatas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2b6d3ad8-2bf9-4347-934f-9503609fd364"),
                            Key = "Dapr",
                            RouteId = new Guid("cbeaf261-a0e4-42a0-b19b-8cd66da30eaf"),
                            Value = "method"
                        },
                        new
                        {
                            Id = new Guid("410ea990-d67b-4004-8843-cfcce14b9251"),
                            Key = "Dapr",
                            RouteId = new Guid("a4ad8801-0d3c-4737-9043-5b90fb1dac23"),
                            Value = "method"
                        });
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpPassiveHealthCheckOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Enabled")
                        .HasColumnType("bit");

                    b.Property<Guid?>("HealthCheckOptionId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Policy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReactivationPeriod")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HealthCheckOptionId")
                        .IsUnique();

                    b.ToTable("YarpPassiveHealthCheckOptions");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpRoute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorizationPolicy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ClusterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorsPolicy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<string>("RouteId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId");

                    b.ToTable("YarpRoutes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cbeaf261-a0e4-42a0-b19b-8cd66da30eaf"),
                            AuthorizationPolicy = "Default",
                            ClusterId = new Guid("347c00cf-6e72-4f9f-8f8e-2d695a3a2cd6"),
                            RouteId = "first-service"
                        },
                        new
                        {
                            Id = new Guid("a4ad8801-0d3c-4737-9043-5b90fb1dac23"),
                            ClusterId = new Guid("347c00cf-6e72-4f9f-8f8e-2d695a3a2cd6"),
                            RouteId = "second-service"
                        });
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpRouteHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCaseSensitive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MatchId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Mode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Values")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("YarpRouteHeaders");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpRouteQueryParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCaseSensitive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Mode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Values")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("YarpRouteQueryParameter");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpSessionAffinityConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AffinityKeyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ClusterId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("FailurePolicy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Policy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId")
                        .IsUnique();

                    b.ToTable("YarpSessionAffinityOptions");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpSessionAffinityCookie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Expiration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HttpOnly")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEssential")
                        .HasColumnType("bit");

                    b.Property<string>("MaxAge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SameSite")
                        .HasColumnType("int");

                    b.Property<int?>("SecurePolicy")
                        .HasColumnType("int");

                    b.Property<Guid?>("SessionAffinityConfigId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SessionAffinityConfigId")
                        .IsUnique()
                        .HasFilter("[SessionAffinityConfigId] IS NOT NULL");

                    b.ToTable("YarpSessionAffinityCookie");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpSessionAffinityOptionSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("YarpSessionAffinityOptionSettings");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpTransform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RouteId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("YarpTransforms");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpWebProxyConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("BypassOnLocal")
                        .HasColumnType("bit");

                    b.Property<Guid?>("HttpClientOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("UseDefaultCredentials")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HttpClientOptionId")
                        .IsUnique()
                        .HasFilter("[HttpClientOptionId] IS NOT NULL");

                    b.ToTable("YarpWebProxyConfig");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpActiveHealthCheckOption", b =>
                {
                    b.HasOne("Yarp.Gateway.Entities.YarpHealthCheckOption", "HealthCheckOption")
                        .WithOne("Active")
                        .HasForeignKey("Yarp.Gateway.Entities.YarpActiveHealthCheckOption", "HealthCheckOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCheckOption");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpDestination", b =>
                {
                    b.HasOne("Yarp.Gateway.Entities.YarpCluster", "Cluster")
                        .WithMany("Destinations")
                        .HasForeignKey("ClusterId");

                    b.Navigation("Cluster");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpForwarderRequest", b =>
                {
                    b.HasOne("Yarp.Gateway.Entities.YarpCluster", "Cluster")
                        .WithOne("HttpRequest")
                        .HasForeignKey("Yarp.Gateway.Entities.YarpForwarderRequest", "ClusterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cluster");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpHealthCheckOption", b =>
                {
                    b.HasOne("Yarp.Gateway.Entities.YarpCluster", "Cluster")
                        .WithOne("HealthCheck")
                        .HasForeignKey("Yarp.Gateway.Entities.YarpHealthCheckOption", "ClusterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cluster");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpHttpClientOption", b =>
                {
                    b.HasOne("Yarp.Gateway.Entities.YarpCluster", "Cluster")
                        .WithOne("HttpClient")
                        .HasForeignKey("Yarp.Gateway.Entities.YarpHttpClientOption", "ClusterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cluster");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpMatch", b =>
                {
                    b.HasOne("Yarp.Gateway.Entities.YarpRoute", "Route")
                        .WithOne("Match")
                        .HasForeignKey("Yarp.Gateway.Entities.YarpMatch", "RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpMetadata", b =>
                {
                    b.HasOne("Yarp.Gateway.Entities.YarpCluster", "Cluster")
                        .WithMany("Metadata")
                        .HasForeignKey("ClusterId");

                    b.HasOne("Yarp.Gateway.Entities.YarpDestination", "Destination")
                        .WithMany("Metadata")
                        .HasForeignKey("DestinationId");

                    b.HasOne("Yarp.Gateway.Entities.YarpRoute", "Route")
                        .WithMany("Metadata")
                        .HasForeignKey("RouteId");

                    b.Navigation("Cluster");

                    b.Navigation("Destination");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpPassiveHealthCheckOption", b =>
                {
                    b.HasOne("Yarp.Gateway.Entities.YarpHealthCheckOption", "HealthCheckOption")
                        .WithOne("Passive")
                        .HasForeignKey("Yarp.Gateway.Entities.YarpPassiveHealthCheckOption", "HealthCheckOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthCheckOption");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpRoute", b =>
                {
                    b.HasOne("Yarp.Gateway.Entities.YarpCluster", "Cluster")
                        .WithMany("ProxyRoutes")
                        .HasForeignKey("ClusterId");

                    b.Navigation("Cluster");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpRouteHeader", b =>
                {
                    b.HasOne("Yarp.Gateway.Entities.YarpMatch", "Match")
                        .WithMany("Headers")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpRouteQueryParameter", b =>
                {
                    b.HasOne("Yarp.Gateway.Entities.YarpMatch", "Match")
                        .WithMany("QueryParameters")
                        .HasForeignKey("MatchId");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpSessionAffinityConfig", b =>
                {
                    b.HasOne("Yarp.Gateway.Entities.YarpCluster", "Cluster")
                        .WithOne("SessionAffinity")
                        .HasForeignKey("Yarp.Gateway.Entities.YarpSessionAffinityConfig", "ClusterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cluster");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpSessionAffinityCookie", b =>
                {
                    b.HasOne("Yarp.Gateway.Entities.YarpSessionAffinityConfig", "SessionAffinityConfig")
                        .WithOne("Cookie")
                        .HasForeignKey("Yarp.Gateway.Entities.YarpSessionAffinityCookie", "SessionAffinityConfigId");

                    b.Navigation("SessionAffinityConfig");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpTransform", b =>
                {
                    b.HasOne("Yarp.Gateway.Entities.YarpRoute", "Route")
                        .WithMany("Transforms")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpWebProxyConfig", b =>
                {
                    b.HasOne("Yarp.Gateway.Entities.YarpHttpClientOption", "HttpClientOption")
                        .WithOne("WebProxy")
                        .HasForeignKey("Yarp.Gateway.Entities.YarpWebProxyConfig", "HttpClientOptionId");

                    b.Navigation("HttpClientOption");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpCluster", b =>
                {
                    b.Navigation("Destinations");

                    b.Navigation("HealthCheck")
                        .IsRequired();

                    b.Navigation("HttpClient")
                        .IsRequired();

                    b.Navigation("HttpRequest")
                        .IsRequired();

                    b.Navigation("Metadata");

                    b.Navigation("ProxyRoutes");

                    b.Navigation("SessionAffinity")
                        .IsRequired();
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpDestination", b =>
                {
                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpHealthCheckOption", b =>
                {
                    b.Navigation("Active")
                        .IsRequired();

                    b.Navigation("Passive")
                        .IsRequired();
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpHttpClientOption", b =>
                {
                    b.Navigation("WebProxy");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpMatch", b =>
                {
                    b.Navigation("Headers");

                    b.Navigation("QueryParameters");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpRoute", b =>
                {
                    b.Navigation("Match")
                        .IsRequired();

                    b.Navigation("Metadata");

                    b.Navigation("Transforms");
                });

            modelBuilder.Entity("Yarp.Gateway.Entities.YarpSessionAffinityConfig", b =>
                {
                    b.Navigation("Cookie");
                });
#pragma warning restore 612, 618
        }
    }
}
